# -*- coding: utf-8 -*-
"""Decision_Tree_company_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uhhuO0SSLkDTeREbpSa1LxncoIqLoihc
"""

from google.colab import files
uploaded=files.upload()

import pandas as pd
import numpy as np
df=pd.read_csv("Company_Data.csv")
df

df.head()

df.tail()

df.describe()

df.isna().sum()

import warnings
warnings.filterwarnings("ignore")

import seaborn as sns
print(sns.countplot(x="ShelveLoc", data=df))

df.dtypes

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

df['ShelveLoc']=le.fit_transform(df['ShelveLoc'])
df['Urban']=le.fit_transform(df['Urban'])
df['US']=le.fit_transform(df['US'])



df

X=df.iloc[:,1:11]

X

import matplotlib.pyplot as plt
for i in X:
  sns.distplot(X[i])
  plt.show()

sns.set_style(style="darkgrid")
sns.pairplot(df)

Y=df["Sales"]
Y



import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error as mse
from sklearn.tree import DecisionTreeRegressor
train_mse=[]
test_mse=[]
DT = DecisionTreeRegressor()
for i in range(1,100):
    X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size=0.30)
    DT.fit(X_train,Y_train)
    Y_Pred_train = DT.predict(X_train)
    Y_Pred_test = DT.predict(X_test)
    train_mse.append(np.sqrt(mse(Y_train,Y_Pred_train).round(2)))
    test_mse.append(np.sqrt(mse(Y_test,Y_Pred_test).round(2)))
print('Training Mse',np.mean(train_mse))
print('Test Mse', np.mean(test_mse))

from sklearn import tree
import graphviz
dd=tree.export_graphviz(DT,filled=True)
graph=graphviz.Source(dd)
graph

df["Sales"].mean()

Sales_new=[]
for i in range(0,400):
  if df["Sales"][i]>=df["Sales"].mean():
    Sales_new.append("0") 
  else:
    Sales_new.append("1")

df1 = pd.DataFrame({"Sn":Sales_new})

df1

df2=pd.concat([df,df1],axis=1)

df2

X1=df2.iloc[:,1:11]
X1

Y1=df2["Sn"]

Y1

from sklearn.tree import DecisionTreeClassifier
DT2=DecisionTreeClassifier(criterion="gini",max_depth=2)

from sklearn.preprocessing import StandardScaler
ss=StandardScaler()

ss_count=ss.fit_transform(X1)

ss_count

train_acc=[]
test_acc=[]
for i in range(1,150):
    X_train,X_test,Y_train,Y_test = train_test_split(ss_count,Y1, test_size=0.30)
    DT2.fit(X_train,Y_train)
    Y_Pred_train = DT2.predict(X_train)
    Y_Pred_test = DT2.predict(X_test)
    train_acc.append(accuracy_score(Y_train,Y_Pred_train))
    test_acc.append(accuracy_score(Y_test,Y_Pred_test))
print("train accuracy",np.mean(train_acc))
print("test accuracy",np.mean(test_acc))

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error as mse
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import accuracy_score
DT1 = DecisionTreeClassifier(criterion='entropy',max_depth=2)
train_acc=[]
test_acc=[]
for i in range(1,150):
    X_train,X_test,Y_train,Y_test = train_test_split(ss_count,Y1, test_size=0.30)
    DT1.fit(X_train,Y_train)
    Y_Pred_train = DT1.predict(X_train)
    Y_Pred_test = DT1.predict(X_test)
    train_acc.append(accuracy_score(Y_train,Y_Pred_train))
    test_acc.append(accuracy_score(Y_test,Y_Pred_test))
print("train accuracy",np.mean(train_acc))
print("test accuracy",np.mean(test_acc))

from sklearn import tree
import graphviz
dot_data = tree.export_graphviz(DT1,filled=True)
graph = graphviz.Source(dot_data)
graph

from sklearn import tree
import graphviz
dot_data = tree.export_graphviz(DT2,filled=True)
graph = graphviz.Source(dot_data)
graph

from sklearn.ensemble import BaggingClassifier
from sklearn.metrics import accuracy_score
import warnings 
warnings.filterwarnings("ignore")
train_bag=[]
test_bag=[]
for i in range(1,150):
    X_train,X_test,Y_train,Y_test = train_test_split(ss_count,Y1, test_size=0.30)
    bag = BaggingClassifier(base_estimator = DT2,
                        max_samples= 0.7, 
                        n_estimators = 100, 
                        max_features = 0.5, random_state=24)
    bag.fit(X_train,Y_train)

    Y_Pred_train = bag.predict(X_train)
    Y_Pred_test = bag.predict(X_test)
    train_bag.append(accuracy_score(Y_train,Y_Pred_train).round(2))
    test_bag.append(accuracy_score(Y_test,Y_Pred_test).round(2))

print('Training accuracy', np.mean(train_bag))
print('Test accuracy',np.mean(test_bag))

from sklearn.ensemble import GradientBoostingClassifier
train_accuracy=[]
test_accuracy=[]for i in range(1,150):
    X_train, X_test, y_train, y_test = train_test_split(ss_count,Y1, test_size=0.30)
    GBR = GradientBoostingClassifier(learning_rate=0.09, 
                        n_estimators = 150, 
                        max_features = 0.5, random_state=24)
    GBR.fit(X_train,y_train)

    Y_Pred_train = GBR.predict(X_train)
    Y_Pred_test = GBR.predict(X_test)
    train_accuracy.append(accuracy_score(Y_train,Y_Pred_train).round(2))
    test_accuracy.append(accuracy_score(Y_test,Y_Pred_test).round(2))

print("Accuracy: %.2f%%" % (np.mean(train_accuracy) * 100.0))
print("Accuracy: %.2f%%" % (np.mean(test_accuracy) * 100.0))



